// <auto-generated />
using System;
using Aggregator.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aggregator.DataAccess.Migrations
{
    [DbContext(typeof(AggregatorDbContext))]
    [Migration("20250408111847_LimitPKFix")]
    partial class LimitPKFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nepc")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AccountsInfoLimitWrapper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("LimitId")
                        .HasColumnType("bigint");

                    b.Property<byte>("LimitType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("LimitId")
                        .IsUnique();

                    b.ToTable("AccountsInfoLimitWrappers", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChange", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("DetailsId");

                    b.ToTable("AcctBalChanges", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChangeDetails", b =>
                {
                    b.Property<long>("AcctBalChangeDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long?>("FinTransId")
                        .HasColumnType("bigint");

                    b.Property<string>("IssInstId")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("Reversal")
                        .HasColumnType("bit");

                    b.Property<int>("TransType")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AcctBalChangeDetailsId");

                    b.HasIndex("FinTransId");

                    b.ToTable("AcctBalChangeDetails", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChangeAccountsInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountsInfoId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<long>("AcctBalChangeId")
                        .HasColumnType("bigint");

                    b.Property<long>("AcctBalChangeNotificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcctBalChangeId");

                    b.HasIndex("AcctBalChangeNotificationId");

                    b.ToTable("AcctBalChangeAccountsInfos", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcqFinAuth.AcqFinAuth", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("MerchantInfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("DetailsId");

                    b.HasIndex("MerchantInfoId");

                    b.ToTable("AcqFinAuths", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcqFinAuth.AcqFinAuthDetails", b =>
                {
                    b.Property<long>("AcqFinAuthDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountId")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("AcqFeeDirection")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ApprovalCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("AuthDirection")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("AuthorizationCondition")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CorrespondingAccount")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ExpDate")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTimeOffset>("LocalTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("PhysTerm")
                        .HasColumnType("bit");

                    b.Property<string>("PosEntryMode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("ResponseCode")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<bool>("Reversal")
                        .HasColumnType("bit");

                    b.Property<string>("Rrn")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("TransType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("AcqFinAuthDetailsId");

                    b.ToTable("AcqFinAuthDetails", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcsOtp.AcsOtp", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.ToTable("AcsOtps", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ExpDate")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("RefPan")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("CardInfos", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardInfoLimitWrapper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("LimitId")
                        .HasColumnType("bigint");

                    b.Property<byte>("LimitType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("LimitId");

                    b.ToTable("CardInfoLimitWrappers", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardStatusChange.CardStatusChange", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("DetailsId");

                    b.ToTable("CardStatusChanges", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardStatusChange.CardStatusChangeDetails", b =>
                {
                    b.Property<long>("CardStatusChangeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CardStatusChangeDetailsId"));

                    b.Property<DateTimeOffset>("ChangeDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExpDate")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("NewStatus")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("OldStatus")
                        .HasColumnType("int");

                    b.Property<string>("Service")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CardStatusChangeDetailsId");

                    b.ToTable("CardStatusChangeDetails", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CheckedLimit", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Exceeded")
                        .HasColumnType("bit");

                    b.Property<long>("IssFinAuthDetailsId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ObjectType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("IssFinAuthDetailsId");

                    b.ToTable("CheckedLimits", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.ExtensionParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("NotificationExtensionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationExtensionId");

                    b.ToTable("ExtensionParameters", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.FinTransaction", b =>
                {
                    b.Property<long>("FinTransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("CorrespondingAccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("FeTrans")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<long?>("MerchantInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("FinTransactionId");

                    b.HasIndex("MerchantInfoId")
                        .IsUnique()
                        .HasFilter("[MerchantInfoId] IS NOT NULL");

                    b.ToTable("FinTransactions", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.InboxArchiveMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("InboxArchiveMessages", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuth", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("MerchantInfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("DetailsId");

                    b.HasIndex("MerchantInfoId");

                    b.ToTable("IssFinAuths", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuthDetails", b =>
                {
                    b.Property<long>("IssFinAuthDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcqFeeDirection")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ApprovalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthDirection")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("AuthorizationCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrespondingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dpan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssFeeDirection")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("IssInstId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LocalTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<bool>("Reversal")
                        .HasColumnType("bit");

                    b.Property<string>("Rrn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SvTrace")
                        .HasColumnType("bigint");

                    b.Property<int>("TransType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IssFinAuthDetailsId");

                    b.ToTable("IssFinAuthDetails", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuthAccountsInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountsInfoId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<long>("IssFinAuthId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IssFinAuthId");

                    b.ToTable("IssFinAuthAccountsInfos", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.Limit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("CycleLength")
                        .HasColumnType("int");

                    b.Property<string>("CycleType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("LimitId")
                        .HasColumnType("bigint");

                    b.Property<byte>("LimitType")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("TrsValue")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("UsedValue")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.ToTable("Limits", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.MerchantInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Aid")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("City")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<string>("Country")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Mcc")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Street")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)");

                    b.Property<string>("TerminalId")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("MerchantInfos", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.NotificationExtension", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AcctBalChangeNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AcqFinAuthNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AcsOtpNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CardStatusChangeNotificationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Critical")
                        .HasColumnType("bit");

                    b.Property<string>("ExtensionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("IssFinAuthNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<long?>("OwiUserActionNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PinChangeNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TokenStatusChangeNotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnholdNotificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AcctBalChangeNotificationId");

                    b.HasIndex("AcqFinAuthNotificationId");

                    b.HasIndex("AcsOtpNotificationId");

                    b.HasIndex("CardStatusChangeNotificationId");

                    b.HasIndex("IssFinAuthNotificationId");

                    b.HasIndex("OwiUserActionNotificationId");

                    b.HasIndex("PinChangeNotificationId");

                    b.HasIndex("TokenStatusChangeNotificationId");

                    b.HasIndex("UnholdNotificationId");

                    b.HasIndex("ExtensionId", "NotificationId")
                        .IsUnique();

                    b.ToTable("NotificationExtensions", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.NotificationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationMessages", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.OwiUserAction.OwiUserAction", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("DetailsId");

                    b.ToTable("OwiUserActions", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.OwiUserAction.OwiUserActionDetails", b =>
                {
                    b.Property<long>("OwiUserActionDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OwiUserActionDetailsId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset>("TransactionTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OwiUserActionDetailsId");

                    b.ToTable("OwiUserActionDetails", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.PinChange.PinChange", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("DetailsId");

                    b.ToTable("PinChanges", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.PinChange.PinChangeDetails", b =>
                {
                    b.Property<long>("PinChangeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PinChangeDetailsId"));

                    b.Property<string>("ExpDate")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("ResponseCode")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TransactionTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PinChangeDetailsId");

                    b.ToTable("PinChangeDetails", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.TokenChangeStatus.TokenStatusChange", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("DetailsId");

                    b.ToTable("TokenStatusChanges", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.TokenChangeStatus.TokenStatusChangeDetails", b =>
                {
                    b.Property<long>("TokenStatusChangeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TokenStatusChangeDetailsId"));

                    b.Property<DateTimeOffset>("ChangeDate")
                        .HasMaxLength(14)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DpanExpDate")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DpanRef")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("FpanRef")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("PaymentSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("WalletProvider")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("TokenStatusChangeDetailsId");

                    b.ToTable("TokenStatusChangeDetails", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.Unhold.Unhold", b =>
                {
                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("CardInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("DetailsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("MerchantInfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationId");

                    b.HasIndex("CardInfoId");

                    b.HasIndex("DetailsId");

                    b.HasIndex("MerchantInfoId");

                    b.ToTable("Unholds", "nepc");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.Unhold.UnholdDetails", b =>
                {
                    b.Property<long>("UnholdDetailsId")
                        .HasColumnType("bigint");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ApprovalCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("CorrespondingAccount")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Dpan")
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("IssFeeDirection")
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTimeOffset>("LocalTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Reversal")
                        .HasColumnType("bit");

                    b.Property<string>("Rrn")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<long?>("SvTrace")
                        .HasColumnType("bigint");

                    b.Property<int>("TransType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UnholdDirection")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("UnholdDetailsId");

                    b.ToTable("UnholdDetails", "nepc");
                });

            modelBuilder.Entity("ControlPanel.DataAccess.Entities.Currency", b =>
                {
                    b.Property<int>("CurrencyCode")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyCode");

                    b.ToTable("Currencies", "nepc", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ControlPanel.DataAccess.Entities.LimitIdDescriptionDirectory", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionKg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LimitIdDescriptionDirectories", "nepc", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ControlPanel.DataAccess.Entities.NotificationMessageKeyWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("NotificationType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("NotificationMessageKeyWords", "nepc", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ControlPanel.DataAccess.Entities.NotificationMessageTextDirectory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsNeedSend")
                        .HasColumnType("bit");

                    b.Property<string>("MessageTextEn")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTextKg")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTextRu")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("NotificationType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("OperationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NotificationMessageTextDirectories", "nepc", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("DataIngrestorApi.DataAccess.Entities.InboxMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_InboxMessages_Status");

                    b.ToTable("InboxMessages", "nepc", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AccountsInfoLimitWrapper", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.AcctBalChangeAccountsInfo", null)
                        .WithMany("Limits")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.IssFinAuthAccountsInfo", null)
                        .WithMany("Limits")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.Limit", "Limit")
                        .WithOne()
                        .HasForeignKey("Aggregator.DataAccess.Entities.AccountsInfoLimitWrapper", "LimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Limit");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChange", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChangeDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChangeDetails", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.FinTransaction", "FinTrans")
                        .WithMany()
                        .HasForeignKey("FinTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AccountBalance", "AccountBalance", b1 =>
                        {
                            b1.Property<long>("AcctBalChangeDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("AcctBalChangeDetailsId");

                            b1.ToTable("AcctBalChangeDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcctBalChangeDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AccountAmount", "AccountAmount", b1 =>
                        {
                            b1.Property<long>("AcctBalChangeDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("AcctBalChangeDetailsId");

                            b1.ToTable("AcctBalChangeDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcctBalChangeDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.Authorization", "Auth", b1 =>
                        {
                            b1.Property<long>("AcctBalChangeDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<long?>("Id")
                                .HasColumnType("bigint");

                            b1.Property<bool?>("Reversal")
                                .HasColumnType("bit");

                            b1.HasKey("AcctBalChangeDetailsId");

                            b1.ToTable("AcctBalChangeDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcctBalChangeDetailsId");
                        });

                    b.Navigation("AccountAmount")
                        .IsRequired();

                    b.Navigation("AccountBalance")
                        .IsRequired();

                    b.Navigation("Auth")
                        .IsRequired();

                    b.Navigation("FinTrans");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChangeAccountsInfo", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChange", null)
                        .WithMany("AccountsInfo")
                        .HasForeignKey("AcctBalChangeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChange", "AcctBalChange")
                        .WithMany()
                        .HasForeignKey("AcctBalChangeNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AviableBalance", "AviableBalance", b1 =>
                        {
                            b1.Property<long>("AcctBalChangeAccountsInfoId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("AcctBalChangeAccountsInfoId");

                            b1.ToTable("AcctBalChangeAccountsInfos", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcctBalChangeAccountsInfoId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.ExceedLimitMoney", "ExceedLimit", b1 =>
                        {
                            b1.Property<long>("AcctBalChangeAccountsInfoId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("AcctBalChangeAccountsInfoId");

                            b1.ToTable("AcctBalChangeAccountsInfos", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcctBalChangeAccountsInfoId");
                        });

                    b.Navigation("AcctBalChange");

                    b.Navigation("AviableBalance")
                        .IsRequired();

                    b.Navigation("ExceedLimit")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcqFinAuth.AcqFinAuth", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.AcqFinAuth.AcqFinAuthDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.MerchantInfo", "MerchantInfo")
                        .WithMany()
                        .HasForeignKey("MerchantInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Details");

                    b.Navigation("MerchantInfo");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcqFinAuth.AcqFinAuthDetails", b =>
                {
                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AcqFee", "AcqFee", b1 =>
                        {
                            b1.Property<long>("AcqFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("AcqFinAuthDetailsId");

                            b1.ToTable("AcqFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcqFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AuthMoney", "AuthMoney", b1 =>
                        {
                            b1.Property<long>("AcqFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("AcqFinAuthDetailsId");

                            b1.ToTable("AcqFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcqFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.CardIdentifier", "CardIdentifier", b1 =>
                        {
                            b1.Property<long>("AcqFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("CardIdentifierType")
                                .HasColumnType("int");

                            b1.Property<string>("CardIdentifierValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AcqFinAuthDetailsId");

                            b1.ToTable("AcqFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcqFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.ConvMoney", "ConvMoney", b1 =>
                        {
                            b1.Property<long>("AcqFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("AcqFinAuthDetailsId");

                            b1.ToTable("AcqFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcqFinAuthDetailsId");
                        });

                    b.Navigation("AcqFee")
                        .IsRequired();

                    b.Navigation("AuthMoney")
                        .IsRequired();

                    b.Navigation("CardIdentifier")
                        .IsRequired();

                    b.Navigation("ConvMoney")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcsOtp.AcsOtp", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AcsOtpDetails", "Details", b1 =>
                        {
                            b1.Property<long>("AcsOtpNotificationId")
                                .HasColumnType("bigint");

                            b1.Property<DateTimeOffset>("TransactionTime")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("AcsOtpNotificationId");

                            b1.ToTable("AcsOtps", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcsOtpNotificationId");

                            b1.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AuthMoney", "AuthMoney", b2 =>
                                {
                                    b2.Property<long>("AcsOtpDetailsAcsOtpNotificationId")
                                        .HasColumnType("bigint");

                                    b2.Property<decimal?>("Amount")
                                        .HasColumnType("decimal(15,2)");

                                    b2.Property<string>("Currency")
                                        .HasMaxLength(3)
                                        .HasColumnType("nvarchar(3)");

                                    b2.HasKey("AcsOtpDetailsAcsOtpNotificationId");

                                    b2.ToTable("AcsOtps", "nepc");

                                    b2.WithOwner()
                                        .HasForeignKey("AcsOtpDetailsAcsOtpNotificationId");
                                });

                            b1.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.OtpInfo", "OtpInfo", b2 =>
                                {
                                    b2.Property<long>("AcsOtpDetailsAcsOtpNotificationId")
                                        .HasColumnType("bigint");

                                    b2.Property<DateTimeOffset>("ExpirationTime")
                                        .HasColumnType("datetimeoffset");

                                    b2.Property<string>("Otp")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AcsOtpDetailsAcsOtpNotificationId");

                                    b2.ToTable("AcsOtps", "nepc");

                                    b2.WithOwner()
                                        .HasForeignKey("AcsOtpDetailsAcsOtpNotificationId");
                                });

                            b1.Navigation("AuthMoney");

                            b1.Navigation("OtpInfo")
                                .IsRequired();
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AcsOtpMerchantInfo", "MerchantInfo", b1 =>
                        {
                            b1.Property<long>("AcsOtpNotificationId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<string>("MerchantId")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(4000)
                                .HasColumnType("nvarchar(4000)");

                            b1.HasKey("AcsOtpNotificationId");

                            b1.ToTable("AcsOtps", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("AcsOtpNotificationId");
                        });

                    b.Navigation("CardInfo");

                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("MerchantInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardInfo", b =>
                {
                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.CardIdentifier", "CardIdentifier", b1 =>
                        {
                            b1.Property<long>("CardInfoId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("CardIdentifierType")
                                .HasColumnType("int");

                            b1.Property<string>("CardIdentifierValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CardInfoId");

                            b1.ToTable("CardInfos", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("CardInfoId");
                        });

                    b.Navigation("CardIdentifier")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardInfoLimitWrapper", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany("Limits")
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.Limit", "Limit")
                        .WithMany()
                        .HasForeignKey("LimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Limit");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardStatusChange.CardStatusChange", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.CardStatusChange.CardStatusChangeDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardStatusChange.CardStatusChangeDetails", b =>
                {
                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.CardIdentifier", "CardIdentifier", b1 =>
                        {
                            b1.Property<long>("CardStatusChangeDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("CardIdentifierType")
                                .HasColumnType("int");

                            b1.Property<string>("CardIdentifierValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CardStatusChangeDetailsId");

                            b1.ToTable("CardStatusChangeDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("CardStatusChangeDetailsId");
                        });

                    b.Navigation("CardIdentifier")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CheckedLimit", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuthDetails", null)
                        .WithMany("CheckedLimits")
                        .HasForeignKey("IssFinAuthDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.ExtensionParameter", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.NotificationExtension", "Extension")
                        .WithMany("ExtensionParameters")
                        .HasForeignKey("NotificationExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extension");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.FinTransaction", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.MerchantInfo", "MerchantInfo")
                        .WithOne()
                        .HasForeignKey("Aggregator.DataAccess.Entities.FinTransaction", "MerchantInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.TranMoney", "TranMoney", b1 =>
                        {
                            b1.Property<long>("FinTransactionId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("FinTransactionId");

                            b1.ToTable("FinTransactions", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("FinTransactionId");
                        });

                    b.Navigation("MerchantInfo");

                    b.Navigation("TranMoney")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuth", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuthDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.MerchantInfo", "MerchantInfo")
                        .WithMany()
                        .HasForeignKey("MerchantInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Details");

                    b.Navigation("MerchantInfo");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuthDetails", b =>
                {
                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AccountBalance", "AccountBalance", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AcqFee", "AcqFee", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AuthMoney", "AuthMoney", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.CardIdentifier", "CardIdentifier", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("CardIdentifierType")
                                .HasColumnType("int");

                            b1.Property<string>("CardIdentifierValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.ConvMoney", "ConvMoney", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.IssFee", "IssFee", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.WalletProvider", "WalletProvider", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PaymentSystem")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AuthMoneyDetails", "AuthMoneyDetails", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");

                            b1.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.ExceedLimitMoney", "ExceedLimitMoney", b2 =>
                                {
                                    b2.Property<long>("AuthMoneyDetailsIssFinAuthDetailsId")
                                        .HasColumnType("bigint");

                                    b2.Property<decimal?>("Amount")
                                        .HasColumnType("decimal(15,2)");

                                    b2.Property<string>("Currency")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AuthMoneyDetailsIssFinAuthDetailsId");

                                    b2.ToTable("IssFinAuthDetails", "nepc");

                                    b2.WithOwner()
                                        .HasForeignKey("AuthMoneyDetailsIssFinAuthDetailsId");
                                });

                            b1.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.OwnFundsMoney", "OwnFundsMoney", b2 =>
                                {
                                    b2.Property<long>("AuthMoneyDetailsIssFinAuthDetailsId")
                                        .HasColumnType("bigint");

                                    b2.Property<decimal?>("Amount")
                                        .HasColumnType("decimal(15,2)");

                                    b2.Property<string>("Currency")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AuthMoneyDetailsIssFinAuthDetailsId");

                                    b2.ToTable("IssFinAuthDetails", "nepc");

                                    b2.WithOwner()
                                        .HasForeignKey("AuthMoneyDetailsIssFinAuthDetailsId");
                                });

                            b1.Navigation("ExceedLimitMoney")
                                .IsRequired();

                            b1.Navigation("OwnFundsMoney")
                                .IsRequired();
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.BillingMoney", "BillingMoney", b1 =>
                        {
                            b1.Property<long>("IssFinAuthDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("IssFinAuthDetailsId");

                            b1.ToTable("IssFinAuthDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthDetailsId");
                        });

                    b.Navigation("AccountBalance")
                        .IsRequired();

                    b.Navigation("AcqFee")
                        .IsRequired();

                    b.Navigation("AuthMoney")
                        .IsRequired();

                    b.Navigation("AuthMoneyDetails")
                        .IsRequired();

                    b.Navigation("BillingMoney")
                        .IsRequired();

                    b.Navigation("CardIdentifier")
                        .IsRequired();

                    b.Navigation("ConvMoney")
                        .IsRequired();

                    b.Navigation("IssFee")
                        .IsRequired();

                    b.Navigation("WalletProvider")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuthAccountsInfo", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuth", "IssFinAuth")
                        .WithMany("AccountsInfo")
                        .HasForeignKey("IssFinAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AviableBalance", "AviableBalance", b1 =>
                        {
                            b1.Property<long>("IssFinAuthAccountsInfoId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("IssFinAuthAccountsInfoId");

                            b1.ToTable("IssFinAuthAccountsInfos", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthAccountsInfoId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.ExceedLimitMoney", "ExceedLimit", b1 =>
                        {
                            b1.Property<long>("IssFinAuthAccountsInfoId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("IssFinAuthAccountsInfoId");

                            b1.ToTable("IssFinAuthAccountsInfos", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("IssFinAuthAccountsInfoId");
                        });

                    b.Navigation("AviableBalance")
                        .IsRequired();

                    b.Navigation("ExceedLimit")
                        .IsRequired();

                    b.Navigation("IssFinAuth");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.NotificationExtension", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChange", null)
                        .WithMany("Extensions")
                        .HasForeignKey("AcctBalChangeNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.AcqFinAuth.AcqFinAuth", null)
                        .WithMany("Extensions")
                        .HasForeignKey("AcqFinAuthNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.AcsOtp.AcsOtp", null)
                        .WithMany("Extensions")
                        .HasForeignKey("AcsOtpNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.CardStatusChange.CardStatusChange", null)
                        .WithMany("Extensions")
                        .HasForeignKey("CardStatusChangeNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuth", null)
                        .WithMany("Extensions")
                        .HasForeignKey("IssFinAuthNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.OwiUserAction.OwiUserAction", null)
                        .WithMany("Extensions")
                        .HasForeignKey("OwiUserActionNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.PinChange.PinChange", null)
                        .WithMany("Extensions")
                        .HasForeignKey("PinChangeNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.TokenChangeStatus.TokenStatusChange", null)
                        .WithMany("Extensions")
                        .HasForeignKey("TokenStatusChangeNotificationId");

                    b.HasOne("Aggregator.DataAccess.Entities.Unhold.Unhold", null)
                        .WithMany("Extensions")
                        .HasForeignKey("UnholdNotificationId");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.OwiUserAction.OwiUserAction", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aggregator.DataAccess.Entities.OwiUserAction.OwiUserActionDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.PinChange.PinChange", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.PinChange.PinChangeDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.PinChange.PinChangeDetails", b =>
                {
                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.CardIdentifier", "CardIdentifier", b1 =>
                        {
                            b1.Property<long>("PinChangeDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("CardIdentifierType")
                                .HasColumnType("int");

                            b1.Property<string>("CardIdentifierValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PinChangeDetailsId");

                            b1.ToTable("PinChangeDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("PinChangeDetailsId");
                        });

                    b.Navigation("CardIdentifier")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.TokenChangeStatus.TokenStatusChange", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.TokenChangeStatus.TokenStatusChangeDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.TokenChangeStatus.TokenStatusChangeDetails", b =>
                {
                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.CardIdentifier", "CardIdentifier", b1 =>
                        {
                            b1.Property<long>("TokenStatusChangeDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("CardIdentifierType")
                                .HasColumnType("int");

                            b1.Property<string>("CardIdentifierValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TokenStatusChangeDetailsId");

                            b1.ToTable("TokenStatusChangeDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("TokenStatusChangeDetailsId");
                        });

                    b.Navigation("CardIdentifier")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.Unhold.Unhold", b =>
                {
                    b.HasOne("Aggregator.DataAccess.Entities.CardInfo", "CardInfo")
                        .WithMany()
                        .HasForeignKey("CardInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.Unhold.UnholdDetails", "Details")
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregator.DataAccess.Entities.MerchantInfo", "MerchantInfo")
                        .WithMany()
                        .HasForeignKey("MerchantInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardInfo");

                    b.Navigation("Details");

                    b.Navigation("MerchantInfo");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.Unhold.UnholdDetails", b =>
                {
                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.UnholdMoney", "UnholdMoney", b1 =>
                        {
                            b1.Property<long>("UnholdDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("UnholdDetailsId");

                            b1.ToTable("UnholdDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("UnholdDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.AuthMoney", "AuthMoney", b1 =>
                        {
                            b1.Property<long>("UnholdDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("UnholdDetailsId");

                            b1.ToTable("UnholdDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("UnholdDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.CardIdentifier", "CardIdentifier", b1 =>
                        {
                            b1.Property<long>("UnholdDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<int?>("CardIdentifierType")
                                .HasColumnType("int");

                            b1.Property<string>("CardIdentifierValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UnholdDetailsId");

                            b1.ToTable("UnholdDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("UnholdDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.IssFee", "IssFee", b1 =>
                        {
                            b1.Property<long>("UnholdDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(15,2)");

                            b1.Property<string>("Currency")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.HasKey("UnholdDetailsId");

                            b1.ToTable("UnholdDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("UnholdDetailsId");
                        });

                    b.OwnsOne("Aggregator.DataAccess.Entities.OwnedEntities.WalletProvider", "WalletProvider", b1 =>
                        {
                            b1.Property<long>("UnholdDetailsId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Id")
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)");

                            b1.Property<string>("PaymentSystem")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UnholdDetailsId");

                            b1.ToTable("UnholdDetails", "nepc");

                            b1.WithOwner()
                                .HasForeignKey("UnholdDetailsId");
                        });

                    b.Navigation("AuthMoney")
                        .IsRequired();

                    b.Navigation("CardIdentifier")
                        .IsRequired();

                    b.Navigation("IssFee")
                        .IsRequired();

                    b.Navigation("UnholdMoney")
                        .IsRequired();

                    b.Navigation("WalletProvider")
                        .IsRequired();
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChange.AcctBalChange", b =>
                {
                    b.Navigation("AccountsInfo");

                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcctBalChangeAccountsInfo", b =>
                {
                    b.Navigation("Limits");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcqFinAuth.AcqFinAuth", b =>
                {
                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.AcsOtp.AcsOtp", b =>
                {
                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardInfo", b =>
                {
                    b.Navigation("Limits");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.CardStatusChange.CardStatusChange", b =>
                {
                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuth", b =>
                {
                    b.Navigation("AccountsInfo");

                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuth.IssFinAuthDetails", b =>
                {
                    b.Navigation("CheckedLimits");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.IssFinAuthAccountsInfo", b =>
                {
                    b.Navigation("Limits");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.NotificationExtension", b =>
                {
                    b.Navigation("ExtensionParameters");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.OwiUserAction.OwiUserAction", b =>
                {
                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.PinChange.PinChange", b =>
                {
                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.TokenChangeStatus.TokenStatusChange", b =>
                {
                    b.Navigation("Extensions");
                });

            modelBuilder.Entity("Aggregator.DataAccess.Entities.Unhold.Unhold", b =>
                {
                    b.Navigation("Extensions");
                });
#pragma warning restore 612, 618
        }
    }
}
