@model IEnumerable<ControlPanel.DataAccess.Entites.NotificationMessageKeyWord>

@{
    ViewBag.Title = "Справочник ключевых слов";
    Layout = "_Layout";
}

<h2>@ViewBag.Title</h2>

<div class="accordion" id="keywordAccordion">
    @foreach (var group in Model.GroupBy(x => x.NotificationType))
    {
        // Генерируем уникальные id для кнопки и панели
        var btnId = $"btn_{group.Key}";
        var collapseId = $"collapse_{group.Key}";

        <div class="accordion-item">
            <h2 class="accordion-header" id="heading_@group.Key">
                <button class="accordion-button collapsed"
                        type="button"
                        id="@btnId">
                    @group.Key
                </button>
            </h2>
            <div id="@collapseId" class="accordion-collapse collapse"
                 aria-labelledby="heading_@group.Key">
                <div class="accordion-body">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th style="width: 150px;">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in group)
                        {
                            <tr data-id="@item.Id">
                                <td>@item.KeyWord</td>
                                <td class="desc-cell">@item.Description</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-secondary edit-btn">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // ====== ЛОГИКА РЕДАКТИРОВАНИЯ ======
            document.querySelectorAll('.edit-btn').forEach(function (btn) {
                btn.addEventListener('click', function () {
                    const row = btn.closest('tr');
                    const descCell = row.querySelector('.desc-cell');
                    const originalText = descCell.innerText.trim();
                    const rowId = row.dataset.id; // наш Id из data-id

                    // Проверяем, не в режиме ли мы уже редактирования
                    const isEditing = row.classList.contains('editing');

                    if (!isEditing) {
                        // Входим в режим редактирования
                        row.classList.add('editing');

                        // Превращаем текст в input
                        descCell.innerHTML = `
                            <input type="text" class="form-control form-control-sm desc-input" 
                                   value="${originalText}" />
                        `;

                        // Меняем кнопку на "Сохранить" (зелёная)
                        btn.classList.remove('btn-secondary');
                        btn.classList.add('btn-success');
                        btn.innerHTML = '<i class="bi bi-check-lg"></i>';

                        // Добавляем рядом кнопку "Отмена" (красная)
                        const cancelBtn = document.createElement('button');
                        cancelBtn.type = 'button';
                        cancelBtn.classList.add('btn', 'btn-sm', 'btn-danger', 'ms-1', 'cancel-btn');
                        cancelBtn.innerHTML = '<i class="bi bi-x-lg"></i>';
                        btn.parentNode.appendChild(cancelBtn);

                        // Обработка клика на "Отмена"
                        cancelBtn.addEventListener('click', function () {
                            // Откатываем изменения
                            descCell.innerText = originalText;
                            row.classList.remove('editing');
                            btn.classList.remove('btn-success');
                            btn.classList.add('btn-secondary');
                            btn.innerHTML = '<i class="bi bi-pencil-square"></i>';
                            cancelBtn.remove();
                        });
                    } else {
                        // Сейчас кнопка — "Сохранить"
                        const input = row.querySelector('.desc-input');
                        const newText = input.value.trim();

                        // Делаем AJAX-запрос на сохранение
                        fetch('@Url.Action("UpdateDescription", "NotificationMessageKeyWords")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                id: parseInt(rowId),
                                description: newText
                            })
                        })
                            .then(response => {
                                if (!response.ok) {
                                    showToast('Network response was not OK', 'danger');
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.success) {
                                    descCell.innerText = newText;
                                    row.classList.remove('editing');
                                    btn.classList.remove('btn-success');
                                    btn.classList.add('btn-secondary');
                                    btn.innerHTML = '<i class="bi bi-pencil-square"></i>';
                                    const cancelBtn = row.querySelector('.cancel-btn');
                                    if (cancelBtn) cancelBtn.remove();
                                    showToast('Сохранено успешно!', 'success');
                                } else {
                                    showToast('Сохранение не удалось!', 'danger');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                showToast('Ошибка при сохранении. См. консоль.', 'danger');
                            });
                    }
                });
            });

            // ====== ЛОГИКА "АККОРДЕОНА" ВРУЧНУЮ С ПЕРЕКЛЮЧЕНИЕМ ИКОНКИ ======
            const allButtons = document.querySelectorAll('.accordion-button');
            const collapses = {};

            allButtons.forEach(btn => {
                // Ключ для словаря collapses
                const key = btn.id.replace('btn_', '');
                const collapseEl = document.getElementById(`collapse_${key}`);

                if (!collapseEl) {
                    console.warn("Не найден collapse для", btn.id);
                    return;
                }

                // Создаём инстанс без автотоггла
                const bsCollapse = new bootstrap.Collapse(collapseEl, { toggle: false });

                // Сохраняем в словаре
                collapses[key] = {
                    instance: bsCollapse,
                    button: btn,
                    collapseEl
                };

                // Кнопка по умолчанию имеет .collapsed (стрелка вниз).
                // Если хотим, чтобы при старте панель была открыта, убираем .collapsed и даём .show панельке

                btn.addEventListener('click', () => {
                    const isOpen = collapseEl.classList.contains('show');

                    if (isOpen) {
                        // Закрываем текущую
                        bsCollapse.hide();
                        // Добавляем кнопке класс .collapsed, чтобы стрелка смотрела вниз
                        btn.classList.add('collapsed');
                    } else {
                        // Сначала закрываем все остальные
                        Object.entries(collapses).forEach(([otherKey, other]) => {
                            // Если другая панель открыта — закрываем её
                            if (other.collapseEl.classList.contains('show')) {
                                other.instance.hide();
                                other.button.classList.add('collapsed');
                            }
                        });
                        bsCollapse.show();
                        // Убираем у кнопки класс .collapsed (стрелка вверх)
                        btn.classList.remove('collapsed');
                    }
                });
            });
        });

        function showToast(message, type = 'success', delay = 3000) {
            // Проверяем, есть ли контейнер для toast'ов, если нет — создаём
            let container = document.getElementById('toastContainer');
            if (!container) {
                container = document.createElement('div');
                container.id = 'toastContainer';
                container.className = 'toast-container position-fixed top-0 end-0 p-3';
                document.body.appendChild(container);
            }

            // Создаём элемент toast
            const toastEl = document.createElement('div');
            toastEl.className = `toast align-items-center text-bg-${type} border-0`;
            toastEl.setAttribute('role', 'alert');
            toastEl.setAttribute('aria-live', 'assertive');
            toastEl.setAttribute('aria-atomic', 'true');

            toastEl.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                    data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;

            container.appendChild(toastEl);

            // Инициализируем toast через Bootstrap
            const bsToast = new bootstrap.Toast(toastEl, {delay: delay});
            bsToast.show();

            // После скрытия удаляем элемент
            toastEl.addEventListener('hidden.bs.toast', () => {
                toastEl.remove();
            });
        }
    </script>
}
